{"version":3,"sources":["data/Welcome.md","common/Head.jsx","common/MarkdownRender.jsx","common/Article.jsx","pages/Home.jsx","pages/Archive.jsx","pages/About.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Head","props","className","style","border","title","subTitle","extra","to","MarkdownRender","newProps","plugins","RemarkMathPlugin","renderers","math","Node","formula","value","inlineMath","inline","Provider","input","Article","state","markdown","fetch","MarkdownData","then","res","text","setState","this","source","Component","Home","position","Archive","About","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,0SC2B5BC,G,OArBF,SAACC,GAEV,OACI,yBAAKC,UAAU,UACX,kBAAC,IAAD,CACIC,MAAO,CACHC,OAAQ,gCAEZC,MAAM,qBACNC,SAAS,qBACTC,MAAO,CACH,kBAAC,IAAD,KAAQ,kBAAC,IAAD,CAAMC,GAAG,SAAT,iBACR,kBAAC,IAAD,KAAQ,kBAAC,IAAD,CAAMA,GAAG,YAAT,iBACR,kBAAC,IAAD,KAAQ,kBAAC,IAAD,CAAMA,GAAG,UAAT,uB,mHCQbC,MArBf,SAAwBR,GACpB,IAAMS,EAAQ,eACPT,EADO,CAEVU,QAAS,CACPC,KAEFC,UAAU,eACLZ,EAAMY,UADF,CAEPC,KAAM,SAACb,GAAD,OACJ,kBAAC,IAAQc,KAAT,CAAcC,QAASf,EAAMgB,SAC/BC,WAAY,SAACjB,GAAD,OACV,kBAAC,IAAQc,KAAT,CAAcI,QAAM,EAACH,QAASf,EAAMgB,aAG1C,OACE,kBAAC,IAAQG,SAAT,CAAkBC,MAAM,OACpB,kBAAC,IAAkBX,K,kBCIhBY,E,YAhBb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAAEC,SAAU,IAFb,E,kFAKQ,IAAD,OAEnBC,MAAMC,KAAcC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAAEN,SAAUK,S,+BAG3E,IACAL,EAAaO,KAAKR,MAAlBC,SACR,OAAO,kBAAC,EAAD,CAAgBQ,OAAQR,Q,GAdbS,aCOPC,EATF,WACX,OACE,6BACA,kBAAC,EAAD,CAAMC,SAAU,SAChB,kBAAC,EAAD,QCAWC,G,OANC,WACd,OACE,kBAAC,EAAD,CAAMD,SAAU,cCILE,G,OAND,WACZ,OACE,kBAAC,EAAD,CAAMF,SAAU,YCsBLG,MArBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,SAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,UCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90c7b217.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Welcome.acc30dd6.md\";","\nimport React from 'react';\nimport { PageHeader, Menu, Layout, Button } from 'antd';\nimport './Head.css';\nimport { Link } from \"react-router-dom\";\n\nconst Head = (props) => {\n\n    return (\n        <div className=\"header\">\n            <PageHeader\n                style={{\n                    border: '1px solid rgb(235, 237, 240)',\n                }}\n                title=\"巴别塔\"\n                subTitle=\"副标题\"\n                extra={[\n                    <Button><Link to=\"/home\">首页</Link></Button>,\n                    <Button><Link to=\"/archive\">归档</Link></Button>,\n                    <Button><Link to=\"/about\">关于</Link></Button>,\n                  ]}\n            />\n        </div>\n    )\n}\n\n\nexport default Head;","import React, { Component } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport MathJax from 'react-mathjax';\nimport RemarkMathPlugin from 'remark-math';\n\n\nfunction MarkdownRender(props) {\n    const newProps = {\n        ...props,\n        plugins: [\n          RemarkMathPlugin,\n        ],\n        renderers: {\n          ...props.renderers,\n          math: (props) => \n            <MathJax.Node formula={props.value} />,\n          inlineMath: (props) =>\n            <MathJax.Node inline formula={props.value} />\n        }\n      };\n      return (\n        <MathJax.Provider input=\"tex\">\n            <ReactMarkdown {...newProps} />\n        </MathJax.Provider>\n      );\n}\n\nexport default MarkdownRender","import React, { Component } from 'react';\nimport { PageHeader, Menu, Layout, Button } from 'antd';\nimport './Article.css';\nimport { Link } from \"react-router-dom\";\n\nimport MarkdownRender  from './MarkdownRender'\nimport MarkdownData from '../data/Welcome.md';\n\nclass Article extends Component {\n\n  constructor() {\n    super();\n    this.state = { markdown: '' };\n  }\n\n  componentWillMount() {\n    // Get the contents from the Markdown file and put them in the React state, so we can reference it in render() below.\n    fetch(MarkdownData).then(res => res.text()).then(text => this.setState({ markdown: text }));\n  }\n\n  render() {\n    const { markdown } = this.state;\n    return <MarkdownRender source={markdown} />;\n  }\n}\n\nexport default Article;","import React from 'react';\nimport './Home.css';\nimport Head from '../common/Head'\nimport Article from '../common/Article'\n\n\nconst Home = () => {\n  return (\n    <div>\n    <Head position={\"home\"} />\n    <Article />\n    </div>\n  )\n}\n\nexport default Home;\n","import React from 'react';\nimport './Archive.css';\nimport Head from '../common/Head'\n\nconst Archive = () => {\n  return (\n    <Head position={\"archive\"} />\n  )\n}\n\nexport default Archive;","import React from 'react';\nimport './About.css';\nimport Head from '../common/Head'\n\nconst About = () => {\n  return (\n    <Head position={\"about\"} />\n  )\n}\n\nexport default About;","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Home from \"./pages/Home.jsx\";\nimport Archive from \"./pages/Archive\";\nimport About from \"./pages/About\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/home\">\n            <Home />\n          </Route>\n          <Route path=\"/archive\">\n            <Archive />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}